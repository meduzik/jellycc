[terminals]

import: K_import;
as: K_as;

identifier: Identifier;

decimal_lit: Decimal;
float_lit: Float;
hex_lit: Hex;
bin_lit: Bin;

comment: Comment {skip};
ml_comment: MLComment {skip};

string_lit: String;

"(": LParen;
")": RParen;
"[": LBracket;
"]": RBracket;
"{": LBrace;
"}": RBrace;

"#": OpHash;

"=": OpAssign;
"+=": OpPlusAssign;
"-=": OpMinusAssign;
"*=": OpMulAssign;
"/=": OpDivAssign;
"%=": OpModAssign;
"&=": OpAndAssign;
"|=": OpOrAssign;
"^=": OpXorAssign;
"<<=": OpShlAssign;
">>=": OpShrAssign;

"++": OpIncr;
"--": OpDecr;

"+": OpPlus;
"-": OpMinus;
"*": OpMul;
"/": OpDiv;
"%": OpMod;
"~": OpNeg;
"&": OpBitAnd;
"|": OpBitOr;
"||": OpLogicalOr;
"&&": OpLogicalAnd;
"^": OpBitXor;
"<<": OpShl;
">>": OpShr;

"==": OpEQ;
"!=": OpNEQ;
"<": OpLT;
">": OpGT;
"<=": OpLE;
">=": OpGE;

"->": OpArrow;
".": OpDot;
",": OpComma;
":": OpColon;
";": OpSemi;
"?": OpQuestion;

eof: "EoF" {eof};
space: "Space" {skip};
error: "Error" {error};

[parser.header]
#include <unordered_map>
#include <string>

using VarMap = std::unordered_map<std::string, double>;
struct DoubleList {
	double val;
	DoubleList* next;
};
struct CBData {
	void* ud;
	std::string (*make_string) (void*, uint32_t t);
	double (*make_num) (void*, uint32_t t);
	double (*invoke) (void*, const std::string& fname, DoubleList* args);
	void (*sync_skip) (void*, uint32_t*& tokid, size_t num);
	void (*sync_insert) (void*, uint32_t*& tokid, uint16_t terminal);

	void (*lec_insert) (void*, uint32_t*& tokid, uint16_t terminal);
	void (*lec_remove) (void*, uint32_t*& tokid);
	void (*lec_replace) (void*, uint32_t*& tokid, uint16_t terminal);
};
using FuncMap = std::unordered_map<std::string, double(*)(DoubleList*)>;

[parser.source]

#define mkstring(t) cb.make_string(cb.ud, t)
#define mklist(head, tail) new DoubleList{head, tail}
#define parse(t) cb.make_num(cb.ud, t)

[parser.vm_args]
vars: "VarMap*";
tokid: "uint32_t*";
cb: "CBData";

[parser.vm_actions]
shift: {*(tokid++)};
correction_remove: { cb.lec_remove(cb.ud, tokid); };
correction_insert: { cb.lec_insert(cb.ud, tokid, terminal); };
correction_replace: { cb.lec_replace(cb.ud, tokid, terminal); };
sync_skip: { cb.sync_skip(cb.ud, tokid, num); };
sync_insert: { cb.sync_insert(cb.ud, tokid, terminal); };

[parser.types]

terminal: "uint32_t";
expr: "double";

vardef: "";
program: "";

expr_list: "DoubleList*";

as_clause: "";
subset_clause: "";
subset_entries: "";
subset_entry: "";
subset_entries_head: "";

[parser.expose]

program;

[parser.grammar]

program: ;
program: program vardef ;
program: program import_def ;

vardef: identifier '=' expr ';' {(*vars)[mkstring($identifier)] = $expr};
import_def: import string_lit as_clause subset_clause ';' {nullptr};

as_clause: as identifier {nullptr};
as_clause: {nullptr};

subset_clause: {nullptr};
subset_clause: '{' subset_entries '}' {nullptr};
subset_entries: {nullptr};
subset_entries: subset_entries_head {nullptr};
subset_entries_head: subset_entry {nullptr};
subset_entries_head: subset_entries_head ',' subset_entry {nullptr};

subset_entry: identifier as_clause {nullptr};

expr_list: {nullptr};
expr_list: expr_list_head;
expr_list_head: expr ',' expr_list_head  {mklist($expr, $expr_list_head)};
expr_list_head: expr {mklist($expr, nullptr)};

expr: expr_at[14];

expr_at[n] where n == 13: lhs=expr_at[13] '||' rhs=expr_at[12] {$lhs || $rhs};

expr_at[n] where n == 12: lhs=expr_at[12] '&&' rhs=expr_at[11] {$lhs && $rhs};

expr_at[n] where n == 11: lhs=expr_at[11] '>' rhs=expr_at[10] {$lhs > $rhs};
expr_at[n] where n == 11: lhs=expr_at[11] '<' rhs=expr_at[10] {$lhs < $rhs};
expr_at[n] where n == 11: lhs=expr_at[11] '<=' rhs=expr_at[10] {$lhs <= $rhs};
expr_at[n] where n == 11: lhs=expr_at[11] '>=' rhs=expr_at[10] {$lhs >= $rhs};
expr_at[n] where n == 11: lhs=expr_at[11] '!=' rhs=expr_at[10] {$lhs != $rhs};
expr_at[n] where n == 11: lhs=expr_at[11] '==' rhs=expr_at[10] {$lhs == $rhs};

expr_at[n] where n == 10: lhs=expr_at[10] '+' rhs=expr_at[9] {$lhs + $rhs};
expr_at[n] where n == 10: lhs=expr_at[10] '-' rhs=expr_at[9] {$lhs - $rhs};

expr_at[n] where n == 9: lhs=expr_at[9] '*' rhs=expr_at[8] {$lhs * $rhs};
expr_at[n] where n == 9: lhs=expr_at[9] '/' rhs=expr_at[8] {$lhs / $rhs};

expr_at[n] where n == 2: '-' expr_at[2] {-$expr_at};
expr_at[n] where n == 2: '+' expr_at[2] {+$expr_at};

expr_at[n] where n == 1: lhs=identifier '(' expr_list ')' {cb.invoke(cb.ud, mkstring($lhs), $expr_list)};

expr_at[n] where n > 0: expr_at[n - 1];
expr_at[n] where n == 0: prim;


prim: '(' expr ')' {$expr};
prim: tok=decimal_lit {parse($tok)};
prim: tok=float_lit {parse($tok)};
prim: tok=hex_lit {parse($tok)};
prim: tok=bin_lit {parse($tok)};
prim: identifier {(*vars)[mkstring($identifier)]};


[lexer.fragments]


digit:          [0-9];
non_zero_digit: [1-9];
l_letter:       [a-z];
U_letter:       [A-Z];
letter:         [a-zA-Z];
space:          [ \n\r\t];
whitespace:     [ \t];
newline:        [\n]|[\r\n]|[\r];
id_start_char:  <letter> | _;
id_char:        <letter> | <digit> | _;
integer:        0 | <non_zero_digit> <digit>*;
hex_digit:      [0-9a-fA-F];

string_prefix:  L|u8|u|U;

[lexer.grammar]

import;
as;

identifier:         <id_start_char> <id_char>*;

decimal_lit:        <integer>;
float_lit:          <integer> [.] <digit>+ ([eE][+\-]?[0-9]+)?;
hex_lit:            0x <hex_digit>+;
bin_lit:            0b [01]+;


space:              (" "|\r\n|\n|\r|\t)+;

comment:            "//" [^\n\r]+ <newline>?;
ml_comment:         "/*" ([^*]|[*]*[^/*])* [*]* "*/";

string_lit:         \" ( \\[nrt0\\"] | \\x <hex_digit>{2} | [^"\\] )* \";
string_lit:         \' ( \\[nrt0\\"] | \\x <hex_digit>{2} | [^'\\] )* \';

"(";
")";
"[";
"]";
"{";
"}";

"#";

"&&";
"||";

"=";
"+=";
"-=";
"*=";
"/=";
"%=";
"&=";
"|=";
"^=";
"<<=";
">>=";

"++";
"--";

"+";
"-";
"*";
"/";
"%";
"~";
"&";
"|";
"^";
"<<";
">>";

"==";
"!=";
"<";
">";
"<=";
">=";

"->";
".";
",";
":";
";";
"?";
